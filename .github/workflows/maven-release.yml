name: Maven Release

on:
  workflow_call:
    inputs:
      time-zone:
        required: false
        default: "Europe/Amsterdam"
        type: string
      timeout-minutes:
        required: false
        default: 10
        type: number


jobs:
  maven-release:
    # Only run if the commit message does not contain '[maven-release-plugin]',  commit is made by mvn.
    if: "!contains(github.event.head_commit.message, '[maven-release-plugin]')"
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      TZ: ${{ inputs.time-zone }}
      MAVEN_OPTS: -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::917951871879:role/GitHubActionsBgOrg

      - name: Get CodeArtifact Authorization Token
        run: |
          codeartifact_auth_token=$(aws codeartifact  get-authorization-token --domain nisv-ateam --domain-owner 917951871879 --region eu-west-1 --query authorizationToken --output text)
          echo "::add-mask::$codeartifact_auth_token"
          echo "CODEARTIFACT_AUTH_TOKEN=$codeartifact_auth_token" >> "$GITHUB_ENV"

      - name: Set up JDK
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: 'temurin'
          java-version-file: '.java-version'
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Set Maven settings.xml
        run: echo "${{ vars.MAVEN_CODE_ARTIFACT_SETTINGS }}" | base64 --decode > ~/.m2/settings.xml

      - name: Extract repo name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b #v2.1.1
        with:
          app-id: ${{ vars.BG_APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ env.REPO_NAME }}, k8s-workloads

      - name: Set up Git credentials
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.email "github-actions@beeldengeluid.nl"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}".insteadOf "git@github.com:${{ github.repository }}.git"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git fetch --tags --prune

      - name: Name Release Branch
        id: name-release-branch
        run: |
          BRANCH_NAME=RELEASE-$(echo ${{ github.sha }} | cut -c1-7)
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create and Push Release Branch
        run: |
          git checkout -b ${{ steps.name-release-branch.outputs.branch }} || git checkout ${{ steps.name-release-branch.outputs.branch }}
          git push origin ${{ steps.name-release-branch.outputs.branch }} -f

      - name: Maven Release Prepare
        run: |
          mvn -B -U release:prepare -fae || { echo "Maven Release Prepare failed."; exit 1; }

      - name: Maven Release Perform
        id: release-output
        run: |
          trap 'echo "Error occurred. Rolling back..."; mvn -B release:rollback' ERR
          mvn -B -U release:perform -fae

      - name: Create and Auto-Merge Pull Request
        run: |
          PROJECT_VERSION=$(git describe --tags --abbrev=0 | sed 's/^[^0-9]*//')
          gh pr create --base ${{ github.event.repository.default_branch }} --head ${{ steps.name-release-branch.outputs.branch }} --title "Release of version $PROJECT_VERSION" --body "This PR merges the Maven release changes."
          gh pr merge ${{ steps.name-release-branch.outputs.branch }} --merge --admin
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Find all folders with Dockerfile
        run: |
          folders=$(find ./target/checkout -type f -name 'Dockerfile' -exec dirname {} \;)
          [ -z "$folders" ] && echo "No Dockerfiles found. Docker build will skip." && exit 0
          echo FOLDERS=$folders >> $GITHUB_ENV

      - name: ECR Login
        if: ${{ env.FOLDERS }}
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build, push Docker images, and trigger workflows for auto deployment
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        if: ${{ env.FOLDERS }}
        run: |
          for dir in ${{ env.FOLDERS }}; do
            echo "Building Docker image in directory: $dir"
            FILE=$(find $dir/target -maxdepth 1 -type f \( -name "*.war" -o -name "*.jar" \))
            BUILD_TYPE=${FILE##*.}  
            IMAGE_TAG=$(basename $FILE .$BUILD_TYPE)-$(echo ${{ github.sha }} | cut -c1-7)
            ECR_IMAGE_REPOSITORY=917951871879.dkr.ecr.eu-west-1.amazonaws.com/${{ github.event.repository.name }}

            docker build -t $ECR_IMAGE_REPOSITORY:$IMAGE_TAG $dir
            docker push $ECR_IMAGE_REPOSITORY:$IMAGE_TAG
            
            echo "Update image for deployments scrips of test,acc and prod environments"
            gh workflow run update-maven-projects-image-tag.yml \
            -r main \
            -R github.com/beeldengeluid/k8s-workloads \
            -f project=${{ github.event.repository.name }} \
            -f environments=acc \
            -f image_tag_prefix=$(basename $dir) \
            -f image_tag=$IMAGE_TAG
          done
