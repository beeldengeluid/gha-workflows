name: Acc and Prd Deployments

on:
  workflow_call:
    inputs:
      deployment-module:
        required: false
        type: string
      time-zone:
        required: false
        default: "Europe/Amsterdam"
        type: string
      timeout-minutes:
        required: false
        default: 10
        type: number


jobs:
  maven-release:
    # Only run if the commit message does not contain '[maven-release-plugin]',  commit is made by mvn.
    if: "!contains(github.event.head_commit.message, '[maven-release-plugin]')"
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      TZ: ${{ inputs.time-zone }}
      GH_TOKEN: ${{ secrets.GH_PAT }}
      MAVEN_ARGS: '-B -U -V -fae --no-transfer-progress'
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@f24d7193d98baebaeacc7e2227925dd47cc267f5 # v4.2.0
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::917951871879:role/GitHubActionsBgOrg

      - name: Get CodeArtifact Authorization Token
        run: |
          codeartifact_auth_token=$(aws codeartifact  get-authorization-token --domain nisv-ateam --domain-owner 917951871879 --region eu-west-1 --query authorizationToken --output text)
          echo "::add-mask::$codeartifact_auth_token"
          echo "CODEARTIFACT_AUTH_TOKEN=$codeartifact_auth_token" >> "$GITHUB_ENV"

      - name: Set up JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version-file: '.java-version'
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Set Maven settings.xml
        run: echo "${{ vars.MAVEN_CODE_ARTIFACT_SETTINGS }}" | base64 --decode > ~/.m2/settings.xml

      - name: Set up Git credentials
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}".insteadOf "git@github.com:${{ github.repository }}.git"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git fetch --tags --prune

      - name: Name Release Branch
        id: name-release-branch
        run: |
          BRANCH_NAME=RELEASE-$(echo ${{ github.sha }} | cut -c1-7)
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create and Push Release Branch
        run: |
          git checkout -b ${{ steps.name-release-branch.outputs.branch }} || git checkout ${{ steps.name-release-branch.outputs.branch }}
          git push origin ${{ steps.name-release-branch.outputs.branch }} -f

      - name: Maven Release Prepare
        run: |
          mvn -B -U release:prepare -fae || { echo "Maven Release Prepare failed."; exit 1; }

      - name: Maven Release Perform
        id: release-output
        run: |
          trap 'echo "Error occurred. Rolling back..."; mvn -B release:rollback' ERR
          mvn -B -U release:perform -fae

      - name: Create and Auto-Merge Pull Request
        run: |
          PROJECT_VERSION=$(git describe --tags --abbrev=0 | sed 's/^[^0-9]*//')
          gh pr create --base ${{ github.event.repository.default_branch }} --head ${{ steps.name-release-branch.outputs.branch }} --title "Release of version $PROJECT_VERSION" --body "This PR merges the Maven release changes."

      - name: ECR Login
        if: ${{ inputs.deployment-module }}
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Prepare Docker image tag and repository
        if: ${{ inputs.deployment-module }}
        run: |
          FILE=$(find ${{ inputs.deployment-module }}/target -maxdepth 1 -type f \( -name "*.war" -o -name "*.jar" \))
          IMAGE_TAG=$(basename $FILE | sed 's/\.\(jar\|war\)$//')-$(echo ${{ github.sha }} | cut -c1-7)
          ECR_REPO=917951871879.dkr.ecr.eu-west-1.amazonaws.com/${{ github.event.repository.name }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV

      - name: Build, push Docker images.
        if: ${{ inputs.deployment-module }}
        run: |
          docker build -t ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}  ${{ inputs.deployment-module }}
          docker push ${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }} 

      - name: Update image in Kubernetes deployment
        if: ${{ inputs.deployment-module }}
        run: |
          # Update the Kubernetes deployment files with the new image tag
          sed -i "s|newTag: .*|newTag: ${{ env.IMAGE_TAG }}|" "/k8s/acc/kustomization.yml"
          sed -i "s|newTag: .*|newTag: ${{ env.IMAGE_TAG }}|" "/k8s/prd/kustomization.yml"
          git add /k8s/acc/kustomization.yml /k8s/prd/kustomization.yml
          git commit -m "Update image tag to ${{ env.IMAGE_TAG }} in acc and prd deployments"
          git push
          gh pr merge ${{ github.head_ref }} --merge --admin
      
